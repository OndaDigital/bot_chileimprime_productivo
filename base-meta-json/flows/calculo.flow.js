const GoogleSheetService = require( "../services/GoogleSheetService");
const chatgpt = require('../services/chatgpt.js');

const {addKeyword, EVENTS} = require('@bot-whatsapp/bot')

const googelSheet = new GoogleSheetService(
    "1zFKxknp8KJq5UgSDnNG9awr-HLEwZIdbb6jZlQkuwtk"
  );

const flujoUnidad = require('./unidad.flow');
const flujoFinalizar = require('./finalizar.flow');
const flujoIndicaciones = require('./indicacionesPostCalculo.flow').default;



const LETRAS = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "√ë", "O", "P", "Q"]; // y as√≠ sucesivamente

module.exports = addKeyword(EVENTS.ACTION)
.addAction(async (ctx, {state, provider, flowDynamic, fallBack, gotoFlow}) => {
    const servicio_seleccionado = state.get('servicio_seleccionado');
    const medidas = await googelSheet.consultarMedidasDisponibles(servicio_seleccionado);
    
    
    const tipo_producto = await googelSheet.obtenerTipoPorNombre(servicio_seleccionado);
    console.log(`Tipo: ${tipo_producto}`);
    //Si es un producto de tipo Rollo se lanza un flujo mas simple
    if(tipo_producto === 'Unidad')
    {
        await gotoFlow(flujoUnidad);
        return;
    }
    else
    {

        let anchosImprimibles = medidas.slice(1).map(medida => medida.imprimible);
        await state.update({ anchosImprimibles: anchosImprimibles });

        let mensaje_seleccion = `Para *${servicio_seleccionado}* selecciona la letra con el *ancho que deseas imprimir* y ten en cuenta el ancho total del rollo:\n\n`;
        anchosImprimibles.forEach((ancho, index) => {
            mensaje_seleccion += `*${LETRAS[index]}.* ${ancho} metros üñ®Ô∏è ( _ancho total ${medidas[index + 1].material}m_ )\n`;
        });
        await flowDynamic(mensaje_seleccion);    
    }
})
.addAction({ capture: true }, async (ctx, { state, flowDynamic, fallBack, gotoFlow }) => {
    const opcionSeleccionada = ctx.body.toUpperCase();
    const anchosImprimibles = state.get('anchosImprimibles');
    const indexSeleccionado = LETRAS.indexOf(opcionSeleccionada);

    if (indexSeleccionado === -1 || indexSeleccionado >= anchosImprimibles.length) {
        await fallBack("Opci√≥n no v√°lida. Por favor, selecciona una letra de la lista.");
        return;
    }

    const anchoSeleccionado = anchosImprimibles[indexSeleccionado];
    await state.update({ anchoSeleccionado: anchoSeleccionado });
    const mensaje = `Seleccionaste: *${anchoSeleccionado} metros de ancho.*\n\nAhora, por favor *ingresa la altura en metros*\n(Ingresar un numero: ejemplo: *2.5*):`;
    await flowDynamic(mensaje);
})

.addAction({ capture: true }, async (ctx, { state, flowDynamic, fallBack, gotoFlow }) => {
    
    const alturaIngresada = ctx.body.replace(",", ".");
    if (isNaN(alturaIngresada) || alturaIngresada < 1) {
        await fallBack("Altura no v√°lida. Por favor, ingresa un n√∫mero mayor a *1 metro.*");
        return;
    }
    await state.update({ alturaSeleccionada: alturaIngresada });

    // Calculamos el precio total
    const anchoSeleccionado = parseFloat(state.get('anchoSeleccionado')); 
    const servicio_seleccionado = state.get('servicio_seleccionado');
    const precioPorMetro = await googelSheet.obtenerPrecioPorNombre(servicio_seleccionado);
    if (!precioPorMetro) {
        await fallBack("Error al obtener el precio. Por favor, int√©ntalo m√°s tarde.");
        return;
    }

    const precioTotal = anchoSeleccionado * alturaIngresada * parseFloat(precioPorMetro);
    await state.update({ precioTotal: precioTotal });
    await state.update({ precioPorMetro: precioPorMetro });

    // Saltamos la informaci√≥n detallada de la cotizaci√≥n y pasamos directamente a la pregunta
    await flowDynamic(`*¬øDeseas agregar sellado o sellado y ojetillos?* 
     A. Sellado
     B. Sellado y ojetillos
     C. No \n
    `);

}).addAction({ capture: true }, async (ctx, { state, flowDynamic, fallBack, gotoFlow }) => {
    const opcionSeleccionada = ctx.body.toUpperCase();
    const precioTotal = await state.get('precioTotal');
    const anchoSeleccionado = await state.get('anchoSeleccionado');
    const alturaIngresada = await state.get('alturaSeleccionada');
    const precioPorMetro = await state.get('precioPorMetro');

    let costoExtra = 0;
    if (opcionSeleccionada === 'A') {
        costoExtra = 1000; // coste adicional por m2 para sellado
        await state.update({ extra: 'Sellado' });
        await state.update({ extra_precio: costoExtra });
        const precioTotalConExtra = precioTotal + (anchoSeleccionado * alturaIngresada * costoExtra);
        await state.update({ precioTotalConExtra: precioTotalConExtra });
        
    

        await flowDynamic(`üñ®Ô∏è *Detalles de tu cotizaci√≥n* üñ®Ô∏è

- Ancho: ${state.get('anchoSeleccionado')} metros
- Altura: ${state.get('alturaSeleccionada')} metros
üìè Servicio: PVC Alta Definici√≥n
üí∞ Precio por metro: $${precioPorMetro}
üî• Precio Total: $${precioTotal}
üî• Extras: Sellado por: ${costoExtra} el m2.
üî• Precio Total con extras: ${precioTotalConExtra}
Esta cotizaci√≥n es v√°lida por 24 horas. 

*Desea continuar con el archivo de impresi√≥n? (Si/No)*
        `);

        //await gotoFlow(flujoIndicaciones);

    } else if (opcionSeleccionada === 'B') {
        costoExtra = 2000; // coste adicional por m2 para sellado y ojetillos
        await state.update({ extra: 'Sellado y ojetillos' });
        await state.update({ extra_precio: costoExtra });
        const precioTotalConExtra = precioTotal + (anchoSeleccionado * alturaIngresada * costoExtra);
        await state.update({ precioTotalConExtra: precioTotalConExtra });

        await flowDynamic(`üñ®Ô∏è *Detalles de tu cotizaci√≥n* üñ®Ô∏è

- Ancho: ${state.get('anchoSeleccionado')} metros
- Altura: ${state.get('alturaSeleccionada')} metros
üìè Servicio: PVC Alta Definici√≥n
üí∞ Precio por metro: $${precioPorMetro}
üî• Precio Total: $${precioTotal}
üî• Extras: Sellado y ojetillos por: ${costoExtra} el m2.
üî• Precio Total con extras: ${precioTotalConExtra}
Esta cotizaci√≥n es v√°lida por 24 horas. 

*Desea continuar con el archivo de impresi√≥n? (Si/No)*
`);
        //await gotoFlow(flujoIndicaciones);

    } else if(opcionSeleccionada === 'C'){

        await state.update({ extra: 'No' });
        await state.update({ extra_precio: 0 });
        await state.update({ precioTotalConExtra: 0 });


await flowDynamic(`üñ®Ô∏è *Detalles de tu cotizaci√≥n* üñ®Ô∏è

- Ancho: ${state.get('anchoSeleccionado')} metros
- Altura: ${state.get('alturaSeleccionada')} metros
üìè Servicio: PVC Alta Definici√≥n
üí∞ Precio por metro: $${precioPorMetro}
üî• Extras: No
üî• Precio Total: $${precioTotal}
Esta cotizaci√≥n es v√°lida por 24 horas. 

*Desea continuar con el archivo de impresi√≥n? (Si/No)*
`);
        //await gotoFlow(flujoIndicaciones);
    }
    
    else {
        await fallBack("Opci√≥n no v√°lida. Por favor, selecciona A, B o C.");
        return;
    }

    
})
.addAction({ capture: true }, async (ctx, { state, flowDynamic, fallBack, gotoFlow }) => {
    const respuesta = ctx.body.toLowerCase();
    if (respuesta === 'si') {
        const anchoSeleccionado = state.get('anchoSeleccionado');
        const alturaIngresada = state.get('alturaSeleccionada');
        
        await flowDynamic(`Entendido. 

Primero, hablemos del dise√±o:

Tu dise√±o debe tener medidas exactas de *${anchoSeleccionado * 100} cm x ${alturaIngresada * 100} cm*. Esta es la dimensi√≥n que seleccionaste. Ahora, hablemos sobre los DPI (puntos por pulgada) y c√≥mo afectan tu dise√±o. *¬øTe parece bien?*`);
    } else {
        await flowDynamic("Entendido. Si cambias de opini√≥n o necesitas m√°s informaci√≥n, no dudes en contactarnos.");
        return;
    }
})
.addAction({ capture: true }, async (ctx, { state, flowDynamic, fallBack, gotoFlow }) => {
    const respuesta = ctx.body.toLowerCase();
    
    await flowDynamic(`Excelente.

Puedes ajustar los DPI de tu dise√±o para mejorar la calidad de impresi√≥n. A mayor DPI, mejor calidad, pero tambi√©n mayor tama√±o de archivo. Por ejemplo, si con 72DPI tu dise√±o pesa cerca de 100MB, al aumentar los DPI a 150, el tama√±o puede subir a cerca de 200MB. Es esencial que ajustes cuidadosamente los DPI para no superar los 300MB permitidos.

Con eso en mente, ¬øqu√© deseas hacer a continuaci√≥n?

1. üì§ Subir el archivo por aqu√≠ y finalizar la cotizaci√≥n.
2. üìç Venir a la tienda a finalizar la cotizaci√≥n pero con el archivo.
3. üìß Enviar el archivo por correo.
4. üíº Solicitar a nuestro dise√±ador un dise√±o por $15.000.`);
    
})
.addAction({ capture: true }, async (ctx, { state, flowDynamic, fallBack, gotoFlow }) => {
    const opcionSeleccionada = ctx.body;
    switch (opcionSeleccionada) {
        case "1":
            await gotoFlow(flujoIndicaciones);
            break;
        case "2":
            await flowDynamic("Perfecto, recuerda venir con tu dise√±o a la siguiente direcci√≥n:\nüìç *Av. El Parr√≥n 579, La Cisterna* \nüïê *Horarios de atenci√≥n:* Lunes a s√°bados de 10am hasta las 18:00hrs.\nCorreo: chileimprime13.cl\nSitio web: chileimprime.cl");
            break;
        case "3":
            await flowDynamic("Perfecto, env√≠a tu dise√±o a chileimprime13@gmail.com y envia los detalles de tu cotizaci√≥n. te responderemos a la brevedad.");
            break;
        case "4":
            await fallBack("Nuestro dise√±ador no se encuentra disponible en este momento. Por favor, seleccona otra opci√≥n.");
            return;
        default:
            await fallBack("Opci√≥n no v√°lida. Por favor, selecciona una opci√≥n de la lista (1, 2, 3 o 4).");
            return;
    }
});